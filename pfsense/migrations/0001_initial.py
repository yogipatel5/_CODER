# Generated by Django 5.1.5 on 2025-02-03 03:25

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="DHCPRoutes",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("pfsense_id", models.CharField(help_text="ID of the route in pfSense", max_length=100, unique=True)),
                ("network", models.CharField(help_text="Network address (IPv4/IPv6)", max_length=45)),
                ("subnet", models.CharField(help_text="Subnet mask", max_length=3)),
                (
                    "gateway",
                    models.CharField(
                        help_text="Gateway IP address",
                        max_length=45,
                        validators=[
                            django.core.validators.validate_ipv4_address,
                            django.core.validators.validate_ipv6_address,
                        ],
                    ),
                ),
                ("description", models.CharField(blank=True, help_text="Route description", max_length=255)),
                ("disabled", models.BooleanField(default=False, help_text="Route status")),
                ("route_type", models.CharField(help_text="Type of the route (static or dynamic)", max_length=10)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "last_synced",
                    models.DateTimeField(auto_now=True, help_text="Last time this route was synced with pfSense"),
                ),
            ],
            options={
                "db_table": "dhcp_routes",
                "ordering": ["network", "subnet"],
            },
        ),
        migrations.CreateModel(
            name="Tasks",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(help_text="Name of the task", max_length=255, unique=True)),
                ("description", models.TextField(blank=True, help_text="Description of what this task does")),
                ("is_active", models.BooleanField(default=True, help_text="Whether this task is enabled")),
                (
                    "notify_on_error",
                    models.BooleanField(default=False, help_text="Whether to send notifications on errors"),
                ),
                ("disable_on_error", models.BooleanField(default=False, help_text="Whether to disable task on errors")),
                ("max_retries", models.IntegerField(default=3, help_text="Maximum number of retry attempts")),
                ("schedule", models.CharField(blank=True, help_text="Crontab or interval schedule", max_length=100)),
                ("last_run", models.DateTimeField(blank=True, null=True)),
                ("next_run", models.DateTimeField(blank=True, null=True)),
                ("config", models.JSONField(default=dict, help_text="Task-specific configuration options")),
                ("error_count", models.IntegerField(default=0, help_text="Number of errors encountered")),
                ("last_error", models.TextField(blank=True, help_text="Last error message")),
                ("last_error_time", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Task",
                "verbose_name_plural": "Tasks",
            },
        ),
    ]
