"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import logging
import os
from pathlib import Path

import yaml

from core.vault_settings import get_vault_settings

# Get settings from Vault
vault_settings = get_vault_settings()

# if project.yaml exists, load it
try:
    with open("project.yaml", "r") as f:
        project_config = yaml.safe_load(f)

    # Set environment variables from project.yaml
    for key, value in project_config.get("env", {}).items():
        os.environ[key] = str(value)

except FileNotFoundError:
    pass

# Get Logfire settings from Vault
logfire_settings = vault_settings.get("logfire", {})
LOGFIRE_TOKEN = logfire_settings.get("token", os.getenv("LOGFIRE_TOKEN", ""))
LOGFIRE_PROJECT = logfire_settings.get("project", "coder")

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
        "notion": {
            "handlers": ["console"],
            "level": "DEBUG",
            "propagate": False,
        },
    },
}

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# Get Django core settings from Vault
django_settings = vault_settings.get("django", {})
PROXMOX_CREDS = vault_settings.get("proxmox", {})
SECRET_KEY = django_settings.get("secret_key", os.getenv("DJANGO_SECRET_KEY", ""))
DEBUG = django_settings.get("debug", os.getenv("DJANGO_DEBUG", "True")).lower() == "true"
ALLOWED_HOSTS = django_settings.get(
    "allowed_hosts", os.getenv("DJANGO_ALLOWED_HOSTS", "localhost,127.0.0.1").split(",")
)

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "alfie.apps.AlfieConfig",
    "core.apps.CoreConfig",
    # "projects.apps.ProjectsConfig",
    # "projects.github.apps.GithubConfig",
    "projects.vault.apps.VaultConfig",
    "notion.apps.NotionConfig",  # Temporarily disabled until models are set up
    "network.pfsense.apps.PfsenseConfig",
    "system.apps.SystemConfig",
    "network.proxmox.apps.ProxmoxConfig",
    "django_celery_beat",
    # Third party apps
]

# Notion settings
# TODO: Move hardcoded IDs to environment variables
# TODO: Add validation for required Notion settings
# TODO: Add configuration for rate limiting
# TODO: Add separate settings for different environments

NOTION_API_KEY = os.getenv("NOTION_API_KEY")
NOTION_PROJECT_PAGE_ID = "1769167955c8815f925ee2860e01f786"
if not NOTION_API_KEY:
    logging.warning("NOTION_API_KEY environment variable not set")

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# Get database settings from Vault
db_settings = vault_settings.get("database", {})
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": db_settings.get("name", os.getenv("POSTGRES_DB")),
        "USER": db_settings.get("user", os.getenv("POSTGRES_USER")),
        "PASSWORD": db_settings.get("password", os.getenv("POSTGRES_PASSWORD")),
        "HOST": db_settings.get("host", os.getenv("POSTGRES_HOST")),
        "PORT": db_settings.get("port", os.getenv("POSTGRES_PORT")),
        "OPTIONS": {
            "client_encoding": "UTF8",
        },
    }
}

# Get Redis settings from Vault
redis_settings = vault_settings.get("redis", {})
REDIS_HOST = redis_settings.get("host", os.getenv("REDIS_HOST"))
REDIS_PORT = redis_settings.get("port", os.getenv("REDIS_PORT"))

# Redis Cache
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"redis://{REDIS_HOST}:{REDIS_PORT}/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    }
}

# Use Redis for session cache
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"

# Get Celery settings from Vault
celery_settings = vault_settings.get("celery", {})
CELERY_BROKER_URL = celery_settings.get("broker_url", os.getenv("CELERY_BROKER_URL", "redis://redis:6379/0"))
CELERY_RESULT_BACKEND = celery_settings.get(
    "result_backend", os.getenv("CELERY_RESULT_BACKEND", "redis://redis:6379/0")
)
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = celery_settings.get("timezone", "America/New_York")
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": ("django.contrib.auth.password_validation." "UserAttributeSimilarityValidator"),
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "America/New_York"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "static"

MEDIA_URL = "media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
