# Generated by Django 5.1.5 on 2025-02-09 06:21

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("django_celery_beat", "0019_alter_periodictasks_options"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="TwilioAccount",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(help_text="Friendly name for the Twilio account", max_length=100)),
                ("account_sid", models.CharField(help_text="Twilio Account SID", max_length=34, unique=True)),
                (
                    "vault_auth_token_path",
                    models.CharField(help_text="Path in vault where the auth token is stored", max_length=255),
                ),
                (
                    "phone_numbers",
                    models.JSONField(
                        blank=True, default=list, help_text="List of phone numbers associated with this account"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Twilio Account",
                "verbose_name_plural": "Twilio Accounts",
            },
        ),
        migrations.CreateModel(
            name="Task",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(help_text="Name of the task", max_length=255, unique=True)),
                ("description", models.TextField(blank=True, help_text="Description of what this task does")),
                ("is_active", models.BooleanField(default=True, help_text="Whether this task is active")),
                (
                    "notify_on_error",
                    models.BooleanField(default=False, help_text="Whether to send notifications on errors"),
                ),
                ("disable_on_error", models.BooleanField(default=False, help_text="Whether to disable task on errors")),
                ("max_retries", models.IntegerField(default=3, help_text="Maximum number of retry attempts")),
                (
                    "schedule",
                    models.CharField(blank=True, help_text="Human-readable schedule description", max_length=100),
                ),
                ("last_run", models.DateTimeField(blank=True, help_text="Last time the task was run", null=True)),
                (
                    "last_status",
                    models.CharField(
                        blank=True,
                        choices=[("success", "Success"), ("error", "Error")],
                        help_text="Status of the last execution",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "last_result",
                    models.JSONField(blank=True, help_text="Results from last successful execution", null=True),
                ),
                ("last_error", models.TextField(blank=True, help_text="Error message from last failed execution")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "periodic_task",
                    models.OneToOneField(
                        blank=True,
                        help_text="Associated periodic task in Django Celery Beat",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_task",
                        to="django_celery_beat.periodictask",
                    ),
                ),
            ],
            options={
                "verbose_name": "Task",
                "verbose_name_plural": "Tasks",
                "ordering": ["name"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TaskError",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("error_message", models.TextField(help_text="Full error message")),
                (
                    "error_type",
                    models.CharField(help_text="Type of the error (e.g., ValueError, ConnectionError)", max_length=255),
                ),
                ("file_path", models.CharField(help_text="File where the error occurred", max_length=255)),
                ("function_name", models.CharField(help_text="Function where the error occurred", max_length=255)),
                ("line_number", models.IntegerField(help_text="Line number where the error occurred")),
                (
                    "occurrence_count",
                    models.IntegerField(default=1, help_text="Number of times this error has occurred"),
                ),
                ("first_seen", models.DateTimeField(auto_now_add=True, help_text="When this error was first seen")),
                ("last_seen", models.DateTimeField(auto_now=True, help_text="When this error was last seen")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("new", "New"),
                            ("ongoing", "Ongoing"),
                            ("regressed", "Regressed"),
                            ("cleared", "Cleared"),
                        ],
                        default="new",
                        help_text="Current status of the error",
                        max_length=20,
                    ),
                ),
                ("cleared", models.BooleanField(default=False, help_text="Whether this error has been cleared")),
                ("cleared_at", models.DateTimeField(blank=True, help_text="When this error was cleared", null=True)),
                (
                    "cleared_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who cleared this error",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_cleared_task_errors",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "task",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="errors", to="twilio_app.task"
                    ),
                ),
            ],
            options={
                "ordering": ["-last_seen"],
                "abstract": False,
                "unique_together": {("task", "error_type", "file_path", "function_name", "line_number")},
            },
        ),
    ]
