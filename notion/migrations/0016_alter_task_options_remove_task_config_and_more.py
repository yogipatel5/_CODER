# Generated by Django 5.1.5 on 2025-02-05 21:58

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("django_celery_beat", "0019_alter_periodictasks_options"),
        ("notion", "0015_alter_page_embedding"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterModelOptions(
            name="task",
            options={"ordering": ["name"], "verbose_name": "Task", "verbose_name_plural": "Tasks"},
        ),
        migrations.RemoveField(
            model_name="task",
            name="config",
        ),
        migrations.RemoveField(
            model_name="task",
            name="error_count",
        ),
        migrations.RemoveField(
            model_name="task",
            name="last_error_time",
        ),
        migrations.RemoveField(
            model_name="task",
            name="next_run",
        ),
        migrations.AddField(
            model_name="task",
            name="last_result",
            field=models.JSONField(blank=True, help_text="Results from last successful execution", null=True),
        ),
        migrations.AddField(
            model_name="task",
            name="last_status",
            field=models.CharField(
                blank=True,
                choices=[("success", "Success"), ("error", "Error")],
                help_text="Status of the last execution",
                max_length=20,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="task",
            name="periodic_task",
            field=models.OneToOneField(
                blank=True,
                help_text="Associated periodic task in Django Celery Beat",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="%(app_label)s_task",
                to="django_celery_beat.periodictask",
            ),
        ),
        migrations.AlterField(
            model_name="task",
            name="is_active",
            field=models.BooleanField(default=True, help_text="Whether this task is active"),
        ),
        migrations.AlterField(
            model_name="task",
            name="last_error",
            field=models.TextField(blank=True, help_text="Error message from last failed execution"),
        ),
        migrations.AlterField(
            model_name="task",
            name="last_run",
            field=models.DateTimeField(blank=True, help_text="Last time the task was run", null=True),
        ),
        migrations.AlterField(
            model_name="task",
            name="schedule",
            field=models.CharField(blank=True, help_text="Human-readable schedule description", max_length=100),
        ),
        migrations.CreateModel(
            name="TaskError",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("error_message", models.TextField(help_text="Full error message")),
                (
                    "error_type",
                    models.CharField(help_text="Type of the error (e.g., ValueError, ConnectionError)", max_length=255),
                ),
                ("file_path", models.CharField(help_text="File where the error occurred", max_length=255)),
                ("function_name", models.CharField(help_text="Function where the error occurred", max_length=255)),
                ("line_number", models.IntegerField(help_text="Line number where the error occurred")),
                (
                    "occurrence_count",
                    models.IntegerField(default=1, help_text="Number of times this error has occurred"),
                ),
                ("first_seen", models.DateTimeField(auto_now_add=True, help_text="When this error was first seen")),
                ("last_seen", models.DateTimeField(auto_now=True, help_text="When this error was last seen")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("new", "New"),
                            ("ongoing", "Ongoing"),
                            ("regressed", "Regressed"),
                            ("cleared", "Cleared"),
                        ],
                        default="new",
                        help_text="Current status of the error",
                        max_length=20,
                    ),
                ),
                ("cleared", models.BooleanField(default=False, help_text="Whether this error has been cleared")),
                ("cleared_at", models.DateTimeField(blank=True, help_text="When this error was cleared", null=True)),
                (
                    "cleared_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who cleared this error",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_cleared_task_errors",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "task",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="errors", to="notion.task"
                    ),
                ),
            ],
            options={
                "ordering": ["-last_seen"],
                "abstract": False,
                "unique_together": {("task", "error_type", "file_path", "function_name", "line_number")},
            },
        ),
    ]
