from celery import shared_task
from celery.utils.log import get_task_logger
from django.utils import timezone
from ..models import Task

logger = get_task_logger(__name__)

@shared_task(name="{{app_name}}.tasks.your_task_example") 
def your_task():
    """Your task description."""
    logger.info("Starting task")
    try:
        # Get task configuration
        task = Task.objects.get(name="your_task")
        if not task.is_active:
            logger.warning("Task is not active, skipping execution")
            return None

        # Your task logic here
        result = "Task completed successfully"
        
        # Update task status
        task.last_status = "success"
        task.last_result = {"result": result}
        task.last_run = timezone.now()
        task.save()

        # Update error statuses
        task.errors.update_regressed_errors(task)

        return result

    except Exception as e:
        error_msg = f"Failed to execute task: {str(e)}"
        logger.error(error_msg)

        try:
            task = Task.objects.get(name="your_task")
            task.last_status = "error"
            task.last_error = error_msg
            task.last_run = timezone.now()

            # Log error using manager
            import sys
            task.errors.log_error(task, e, sys.exc_info()[2])

            if task.notify_on_error:
                # Your notification logic here
                pass

            if task.disable_on_error:
                task.is_active = False
                task.save()

        except Exception as inner_e:
            logger.error(f"Error updating task status: {str(inner_e)}")

        return None